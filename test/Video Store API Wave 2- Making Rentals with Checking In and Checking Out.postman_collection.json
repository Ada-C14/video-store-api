{
	"info": {
		"_postman_id": "54e41ee1-2de4-49d7-b6dd-8bf465f0e84c",
		"name": "Video Store API Wave 2: Making Rentals with Checking In and Checking Out",
		"description": "Checks the following endpoints:\n\n- POST /rentals/check-out\n- POST /rentals/check-in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Checks out valid video and customer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2aad34c9-b115-4884-b409-54d0f0495258",
						"exec": [
							"// Pre-request script:",
							"//      1. Find and test a video that has positive available_inventory value",
							"//      2. Find and set valid existing customer ID",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/customers`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one customer",
							"        customers = res.json()",
							"        pm.expect(customers).to.not.have.lengthOf(0);",
							"",
							"        customer = customers[0];",
							"        console.log(customer);",
							"        pm.variables.set(\"valid_customer_id\", customer.id);",
							"",
							"        // Get initial values of videos_checked_out_count",
							"        pm.variables.set(\"original_videos_checked_out\", customer['videos_checked_out_count']);",
							"        console.log('An existing customer was found with the id', pm.variables.get('valid_customer_id'));",
							"        console.log('and the original_videos_checked_out', pm.variables.get('original_videos_checked_out'));",
							"    }",
							"});",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/videos`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one video",
							"        videos = res.json();",
							"        pm.expect(videos).to.not.have.lengthOf(0);",
							"",
							"        video = videos[videos.length - 1];",
							"        console.log(video);",
							"",
							"        // Test that this video needed for the test has a positive available_inventory.",
							"        // If this fails, re-run this test after creating a new video with ample available inventory",
							"",
							"        pm.variables.set(\"valid_video_id\", video.id);",
							"",
							"        // Get initial values of available_inventory",
							"        pm.variables.set(\"original_available_inventory\", video['available_inventory']);",
							"",
							"        console.log('An existing video was found with the id', pm.variables.get('valid_video_id'));",
							"        console.log('and an original_available_inventory', pm.variables.get('original_available_inventory'));",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3c28d018-b7b4-493d-aba2-db12d9ca1580",
						"exec": [
							"pm.test(\"response should be 200 and come back as a json object\", () => {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"response should give back the details of check-out: customer_id, video_id, due_date, videos_checked_out_count, available_inventory\", () => {",
							"    const res = pm.response.json();",
							"    pm.expect(Object.keys(res)).to.have.members(['customer_id', 'video_id', 'due_date', 'videos_checked_out_count', 'available_inventory']);",
							"});",
							"",
							"pm.test(\"request should have incremented videos_checked_out_count, decremented available_inventory\", () => {",
							"    const res = pm.response.json();",
							"",
							"    pm.expect(res.videos_checked_out_count).to.equal( pm.variables.get('original_videos_checked_out') + 1 );",
							"    pm.expect(res.available_inventory).to.equal(pm.variables.get('original_available_inventory') - 1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "customer_id",
							"value": "{{valid_customer_id}}",
							"type": "text"
						},
						{
							"key": "video_id",
							"value": "{{valid_video_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/rentals/check-out",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get errors when checking out and invalid customer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d8094487-c93a-43ba-a1e9-5c6e1b51c175",
						"exec": [
							"// Pre-request script:",
							"//      1. Find and test a video that has positive available_inventory value",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/videos`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one video",
							"        videos = res.json();",
							"        pm.expect(videos).to.not.have.lengthOf(0);",
							"",
							"        video = videos[videos.length - 1];",
							"        pm.variables.set(\"valid_video_id\", video.id);",
							"        console.log('An existing video was found with the id', pm.variables.get('valid_video_id'));",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "030d8971-40a7-44dc-97e1-6d222309674b",
						"exec": [
							"pm.test(\"response should be 404 and come back as a json object\", () => {",
							"    pm.response.to.have.status(404);",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"response should have 'errors'\", () => {",
							"    const res = pm.response.json();",
							"    pm.expect(Object.keys(res)).to.have.members(['ok', 'errors']);",
							"    pm.expect(res['errors']).to.have.keys({ \"customer\": [\"must exist\"]});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "customer_id",
							"value": "-1",
							"type": "text"
						},
						{
							"key": "video_id",
							"value": "{{valid_video_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/rentals/check-out",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get errors when checking out and invalid video",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1252ca9c-25d4-405f-bef0-65d77735a54b",
						"exec": [
							"// Pre-request script:",
							"//      1. Find and set valid existing customer ID",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/customers`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one customer",
							"        customers = res.json()",
							"        pm.expect(customers).to.not.have.lengthOf(0);",
							"",
							"        customer = customers[0];",
							"        pm.variables.set(\"valid_customer_id\", customer.id);",
							"",
							"        // Get initial values of videos_checked_out_count",
							"        pm.variables.set(\"original_videos_checked_out\", customer['videos_checked_out_count']);",
							"        console.log('An existing customer was found with the id', pm.variables.get('valid_customer_id'));",
							"        console.log('and the original_videos_checked_out', pm.variables.get('original_videos_checked_out'));",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3be65b9c-a5b5-440b-9f1d-a510b5923355",
						"exec": [
							"pm.test(\"response should be 404 and come back as a json object\", () => {",
							"    pm.response.to.have.status(404);",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"response should have 'errors'\", () => {",
							"    const res = pm.response.json();",
							"    pm.expect(Object.keys(res)).to.have.members(['ok', 'errors']);",
							"    pm.expect(res['errors']).to.have.keys({ \"video\": [\"must exist\"]});",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "customer_id",
							"value": "{{valid_customer_id}}",
							"type": "text"
						},
						{
							"key": "video_id",
							"value": "-1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/rentals/check-out",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rentals",
						"check-out"
					]
				}
			},
			"response": []
		},
		{
			"name": "Checks in valid video and customer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "179d2aac-8865-47b9-bbde-4f276ac366ed",
						"exec": [
							"// Pre-request script:",
							"//      1. Find and test a video that has positive available_inventory value",
							"//      2. Find and set valid existing customer ID",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/customers`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one customer",
							"        customers = res.json()",
							"        pm.expect(customers).to.not.have.lengthOf(0);",
							"",
							"        customer = customers[0];",
							"        console.log(customer);",
							"        pm.variables.set(\"valid_customer_id\", customer.id);",
							"",
							"        // Get initial values of videos_checked_out_count",
							"        pm.variables.set(\"original_videos_checked_out\", customer['videos_checked_out_count']);",
							"        console.log('An existing customer was found with the id', pm.variables.get('valid_customer_id'));",
							"        console.log('and the original_videos_checked_out', pm.variables.get('original_videos_checked_out'));",
							"    }",
							"});",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/videos`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one video",
							"        videos = res.json();",
							"        pm.expect(videos).to.not.have.lengthOf(0);",
							"",
							"        video = videos[videos.length - 1];",
							"        console.log(video);",
							"",
							"        // Test that this video needed for the test has a positive available_inventory.",
							"        // If this fails, re-run this test after creating a new video with ample available inventory",
							"",
							"        pm.variables.set(\"valid_video_id\", video.id);",
							"",
							"        // Get initial values of available_inventory",
							"        pm.variables.set(\"original_available_inventory\", video['available_inventory']);",
							"",
							"        console.log('An existing video was found with the id', pm.variables.get('valid_video_id'));",
							"        console.log('and an original_available_inventory', pm.variables.get('original_available_inventory'));",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "1912cfba-4f57-4a0d-a504-395a398c3ab5",
						"exec": [
							"pm.test(\"response should be 200 and come back as a json object\", () => {",
							"    pm.response.to.have.status(200);",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"response should give back details of the check-in: customer_id, video_id, videos_checked_out_count, available_inventory\", () => {",
							"    const res = pm.response.json();",
							"    pm.expect(Object.keys(res)).to.have.members(['id','customer_id', 'video_id', 'videos_checked_out_count', 'available_inventory']);",
							"});",
							"",
							"pm.test(\"request should have incremented videos_checked_out_count, decremented available_inventory\", () => {",
							"    const res = pm.response.json();",
							"",
							"    pm.expect(res.videos_checked_out_count).to.equal( pm.variables.get('original_videos_checked_out') - 1 );",
							"    pm.expect(res.available_inventory).to.equal(pm.variables.get('original_available_inventory') + 1);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "customer_id",
							"value": "{{valid_customer_id}}",
							"type": "text"
						},
						{
							"key": "video_id",
							"value": "{{valid_video_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/rentals/check-in",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rentals",
						"check-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get errors when checking in and invalid customer",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "905ba97e-8116-4aa7-a509-c7b61a4195a1",
						"exec": [
							"// Pre-request script:",
							"//      1. Find and test a video that has positive available_inventory value",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/videos`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one video",
							"        videos = res.json();",
							"        pm.expect(videos).to.not.have.lengthOf(0);",
							"",
							"        video = videos[videos.length - 1];",
							"        pm.variables.set(\"valid_video_id\", video.id);",
							"        console.log('An existing video was found with the id', pm.variables.get('valid_video_id'));",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4f6e9840-090a-42c2-b0da-f0123fbe6228",
						"exec": [
							"pm.test(\"response should be 404 and come back as a json object\", () => {",
							"    pm.response.to.have.status(404);",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"response should have 'errors'\", () => {",
							"    const res = pm.response.json();",
							"    pm.expect(Object.keys(res)).to.have.members(['ok', 'errors']);",
							"    pm.expect(res['errors']).to.have.members([\"Invalid rental\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "customer_id",
							"value": "-1",
							"type": "text"
						},
						{
							"key": "video_id",
							"value": "{{valid_video_id}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/rentals/check-in",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rentals",
						"check-in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get errors when checking out and invalid video Copy",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e6176253-57b1-40ef-8d42-d0f4e308a0e1",
						"exec": [
							"// Pre-request script:",
							"//      1. Find and set valid existing customer ID",
							"",
							"pm.sendRequest({",
							"    url: `${ pm.environment.get(\"base_url\") }/customers`,",
							"    method: 'GET'}, function (err, res) {",
							"    if (err) {",
							"        console.log(err);",
							"    } else {",
							"        // Setup assertion: for the sake of this test, there should be at least one customer",
							"        customers = res.json()",
							"        pm.expect(customers).to.not.have.lengthOf(0);",
							"",
							"        customer = customers[0];",
							"        pm.variables.set(\"valid_customer_id\", customer.id);",
							"",
							"        // Get initial values of videos_checked_out_count",
							"        pm.variables.set(\"original_videos_checked_out\", customer['videos_checked_out_count']);",
							"        console.log('An existing customer was found with the id', pm.variables.get('valid_customer_id'));",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cbe7278c-7aec-4fcd-856c-923374132beb",
						"exec": [
							"pm.test(\"response should be 404 and come back as a json object\", () => {",
							"    pm.response.to.have.status(404);",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"pm.test(\"response should have 'errors'\", () => {",
							"    const res = pm.response.json();",
							"    pm.expect(Object.keys(res)).to.have.members(['ok', 'errors']);",
							"    pm.expect(res['errors']).to.have.members([\"Invalid rental\"]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "customer_id",
							"value": "{{valid_customer_id}}",
							"type": "text"
						},
						{
							"key": "video_id",
							"value": "-1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/rentals/check-in",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"rentals",
						"check-in"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}